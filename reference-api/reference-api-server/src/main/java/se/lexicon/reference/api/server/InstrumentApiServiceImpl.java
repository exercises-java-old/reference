package se.lexicon.reference.api.server;


import com.so4it.api.ApiServiceProvider;
import com.so4it.api.Reference;
import com.so4it.api.util.StreamObserverErrorHandler;
import com.so4it.common.util.object.Required;
import io.grpc.stub.StreamObserver;
import se.lexicon.reference.*;
import se.lexicon.reference.CreateInstrumentRequest;
import se.lexicon.reference.api.mapper.CreateInstrumentRequestComponent;
import se.lexicon.reference.component.client.InstrumentClient;
import se.lexicon.reference.component.domain.*;

@ApiServiceProvider(
        value = Reference.NAME,
        version = Reference.VERSION,
        properties = Reference.PROPERTIES,
        specification = Reference.PATH,
        specificationPackageName = Reference.PACKAGE_NAME,
        specificationServiceNames = Reference.SERVICE_NAMES)
public class InstrumentApiServiceImpl extends ReferenceApiServiceGrpc.ReferenceApiServiceImplBase {


    private InstrumentClient instrumentComponentClient;


    public InstrumentApiServiceImpl(InstrumentClient instrumentComponentClient) {
        this.instrumentComponentClient = Required.notNull(instrumentComponentClient, "marketOrderComponentClient");
    }

    @Override
    public void createInstrument(CreateInstrumentRequest request, StreamObserver<CreateInstrumentResponse> responseObserver) {
        StreamObserverErrorHandler.of(responseObserver).onError(() -> {

            instrumentComponentClient.createInstrument(CreateInstrumentRequestComponent.map(request));

            responseObserver.onNext(CreateInstrumentResponse.newBuilder().build());
            responseObserver.onCompleted();
        }, "Failed creating instrument");
    }

    @Override
    public void getInstrument(GetInstrumentRequest request, StreamObserver<GetInstrumentResponse> responseObserver) {
        StreamObserverErrorHandler.of(responseObserver).onError(() -> {
            se.lexicon.reference.component.domain.Instrument fetchedInstrument = instrumentComponentClient.getInstrument(request.getName());

            responseObserver.onNext(GetInstrumentResponse.newBuilder()
                    .setId(fetchedInstrument.getId())
                    .setCurrency(fetchedInstrument.getCurrency().getCurrencyCode())
                    .setName(fetchedInstrument.getName()).build());
            responseObserver.onCompleted();
        }, "failed getting instrument");
    }

    /*@Override
    public void createApplication(CreateMarketRequest request, StreamObserver<CreateMarketResponse> responseObserver) {
        StreamObserverErrorHandler.of(responseObserver).onError(() -> {

            //Response r = marketOrderComponentClient.doSomething()


            //Transform the response to the class generated by gRPC in Java
            //CreateMarketResponse.newBuilder().setName(r.getName()).build();


            responseObserver.onNext(CreateMarketResponse.newBuilder().build());
            responseObserver.onCompleted();
        }, "Failed creating market");
    }*/
}
